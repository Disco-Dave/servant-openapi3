{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
-- {-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE TypeFamilies #-}
-- {-# LANGUAGE ConstraintKinds        #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE DataKinds #-}
module Servant.Swagger where

import Data.Char
import qualified Data.HashMap.Strict as H
import           Data.Monoid
import           Data.Proxy
import           Data.Text (Text)
import qualified Data.Text as T
import           GHC.Exts (Constraint)
import           GHC.TypeLits
import           Servant.API
import           Servant.Swagger.Internal


class HasSwagger h where
  toSwaggerDocs :: Proxy h -> SwagRoute -> SwaggerAPI

instance (HasSwagger rest, KnownSymbol sym) => HasSwagger (sym :> rest) where
  toSwaggerDocs Proxy swagRoute =
    toSwaggerDocs (Proxy :: Proxy rest) (swagRoute ^. .~ 
  where
    path = PathName $ "/" <> T.pack (symbolVal (Proxy :: Proxy sym))
